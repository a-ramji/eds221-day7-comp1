---
title: "EDS Day 7 Interactive Session"
author: "Anna Ramji"
format: html
editor: visual
execute:
  warning: false
---

## Day 7 Interactive Session

### Setup

```{r}
library(tidyverse)
library(palmerpenguins)
library(lubridate)
library(kableExtra)
```

# **Part 1: Data wrangling refresher**

**Refresher 1:** Starting with the `penguins` dataset in the `palmerpenguins` package, write a single piped sequence in which you:

1.  Only include penguins at Biscoe and Dream islands

2.  Remove the `year` and `sex` variables

3.  Add a new column called `body_mass_kg`, with penguin mass converted from grams to kilograms

4.  Rename the `island` variable to `location`

```{r}
biscoe_dream <- penguins |> 
  filter(island %in% c("Biscoe", "Dream")) |> 
  select(!(sex:year)) |> 
  mutate(body_mass_kg = (body_mass_g * 0.001)) |> 
  rename(location = island)
```

**Refresher 2:** Staring with the `penguins` dataset in the `palmerpenguins` package, write a single piped sequence in which you:

1.  Limit to only Adelie penguins

2.  Remove any observations where `flipper_length_mm` is `NA` (hint: `!is.na()`)

3.  Group the data by `sex`

4.  Find the mean (`mean()`), standard deviation (`sd`) and sample size (`n`) of flipper_length_mm for male and female Adelie penguins, returned in a nice summary table

```{r}

```

# **Part 2: Wrangling continued - joins of different flavors**

## **Mutating joins**

Let's create some data to practice and clarify different types of joins.

-   Install the `datapasta` package in R.

-   Quit & restart RStudio.

-   Copy the content of the first table below.

-   With your cursor in a code chunk, go up to Addins \> Datapasta \> as tribble

-   Assign the code to object name `animals`

-   Similarly, copy and datapasta the second table, storing as `sites`

```{r}

```

### **dplyr::full_join()**

The `dplyr::full_join()` function adds columns from the second df to the first df. It is the safest join - nothing is excluded. When in doubt, **full join**.

```{r}

```

### **dplyr::left_join()**

The `dplyr::left_join(x,y)` function keeps everything in x, and only joins from y (by matching key) if they have a match in x. Otherwise they're dropped.

```{r}

```

### **dplyr::right_join()**

Opposite of a `left_join()`.

```{r}

```

### **`dplyr::inner_join()`**

Rows are only kept if the key matches in both x and y (intersection).

```{r}

```

## **Filtering joins**

We'll just look at two filtering join functions (from dplyr documentation):

-   `semi_join()` "return\[s\] all rows from x with a match in y"

-   `anti_join()` "return\[s\] all rows from x *without* a match in y"

```{r}

```
