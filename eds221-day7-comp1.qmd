---
title: "EDS Day 7 Interactive Session"
author: "Anna Ramji"
format: html
editor: visual
execute:
  warning: false
---

## Day 7 Interactive Session

### Setup

```{r}
library(tidyverse)
library(palmerpenguins)
library(lubridate)
library(kableExtra)
```

# **Part 1: Data wrangling refresher**

**Refresher 1:** Starting with the `penguins` dataset in the `palmerpenguins` package, write a single piped sequence in which you:

1.  Only include penguins at Biscoe and Dream islands

2.  Remove the `year` and `sex` variables

3.  Add a new column called `body_mass_kg`, with penguin mass converted from grams to kilograms

4.  Rename the `island` variable to `location`

```{r}
biscoe_dream <- penguins |> 
  filter(island %in% c("Biscoe", "Dream")) |> 
  select(!(sex:year)) |> 
  # could also write: select(-year, -sex)
  mutate(body_mass_kg = (body_mass_g * 0.001)) |> 
  rename(location = island)
```

**Refresher 2:** Staring with the `penguins` dataset in the `palmerpenguins` package, write a single piped sequence in which you:

1.  Limit to only Adelie penguins

2.  Remove any observations where `flipper_length_mm` is `NA` (hint: `!is.na()`) or drop_na()

3.  Group the data by `sex`

4.  Find the mean (`mean()`), standard deviation (`sd`) and sample size (`n`) of flipper_length_mm for male and female Adelie penguins, returned in a nice summary table

```{r}
adelies <- penguins |> 
  filter(species == "Adelie") |> 
# unique(adelies$species)
  drop_na(flipper_length_mm) |> 
  group_by(sex) |> 
  summarize(mean_flipper_length_mm = mean(flipper_length_mm),
            sd_flipper_length_mm = sd(flipper_length_mm),
            sample_size = n())
```

Example with count() funciton

```{r}
#old way 
penguins |> 
  group_by(species, island, sex) |> 
  summarize(sample_size = n())
```

vs

```{r}
#dplyr::count()
penguins |> count(species, island, sex)
```

# **Part 2: Wrangling continued - joins of different flavors**

## **Mutating joins**

Let's create some data to practice and clarify different types of joins.

-   Install the `datapasta` package in R.

-   Quit & restart RStudio.

-   Copy the content of the first table below.

-   With your cursor in a code chunk, go up to Addins \> Datapasta \> as tribble

-   Assign the code to object name `animals`

-   Similarly, copy and datapasta the second table, storing as `sites`

```{r}

animals <- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)
```

```{r}
sites <- data.frame(
  stringsAsFactors = FALSE,
          location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

```{r}
# tibble::tribble(
#   ~`location	full_site_name	jurisdiction`,
#            "beach\tGoleta Beach\tSB City",
#               "lagoon\tUCSB Lagoon\tUCSB",
#            "bluff\tEllwood Mesa\tSB City",
#          "oaks\tFremont Campground\tUSFS",
#                                  "✀\177Ā"
#   )
# data.frame(
#                         stringsAsFactors = FALSE,
#                              check.names = FALSE,
#   `location	full_site_name	jurisdiction` = c("beach\tGoleta Beach\tSB City",
#                                              "lagoon\tUCSB Lagoon\tUCSB","bluff\tEllwood Mesa\tSB City",
#                                              "oaks\tFremont Campground\tUSFS",
#                                              "䌀\177Ā")
# )
```

### **dplyr::full_join()**

The `dplyr::full_join()` function adds columns from the second df to the first df. It is the safest join - nothing is excluded. When in doubt, **full join**.

```{r}
full_join_example <- full_join(animals, sites)
```

### **dplyr::left_join()**

The `dplyr::left_join(x,y)` function keeps everything in x, and only joins from y (by matching key) if they have a match in x. Otherwise they're dropped.

```{r}
left_join_example <- left_join(animals, sites)
```

### **dplyr::right_join()**

Opposite of a `left_join()`.

```{r}
right_join_example <- right_join(animals, sites)
```

### **`dplyr::inner_join()`**

Rows are only kept if the key matches in both x and y (intersection).

```{r}
inner_join_example <- inner_join(animals, sites)
```

## **Filtering joins**

We'll just look at two filtering join functions (from dplyr documentation):

-   `semi_join()` "return\[s\] all rows from x with a match in y"

-   `anti_join()` "return\[s\] all rows from x *without* a match in y"

```{r}
semi_join_example <- semi_join(animals, sites)
anti_join_example <- anti_join(animals, sites)
```

# **Part 3: easier dates and times with {lubridate}**

## **Witness some lubridate magic:**

```{r}
my_date <- "03-15-1998"
lubridate::mdy(my_date)
```

```{r}
my_date <- "11/7/2003"
lubridate::mdy(my_date)
```
